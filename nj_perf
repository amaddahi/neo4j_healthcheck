#!/usr/bin/env python3

# Author: Ali Maddahian
# Last Update 09/26/2021

import sys
import os 
import getopt

from bin import globals 
from bin import get_admin_report_env
from bin import get_env 
from bin import get_stats 
from bin import flag_server_restarts
from bin import get_filenames
from bin import convert_txt_pdf
from bin import usage


def main(argv):

    globals.initialize() 

    start_date = None
    end_date = None
    interval = "X"
    periods = None
    options=True
    checkdb=False
    display_precision=False
    metric_category = 'all'
    output_filename = "nj_perf.out"

    try:
        opts, args = getopt.getopt(sys.argv[1:], 'r:c:z:i:b:p:s:e:m:o:vdh', [
            'query','admin_report_directory=','database=','debug','host_ip=','interval=', 'customer=', 'periods=', 'startdate=', 'enddate=', 'outfile=', 'metric=', 'port=', 'bolt_port=', 'checkdb', 'display_precision', 'verbose', 'help'])

    except getopt.GetoptError:
        usage.run('')
    else:
        for opt, arg in opts:
            if opt in ('-h', '--help'):
                usage.run(0)
                exit()
            if opt in ('-i', '--interval'):
                interval = arg
                #print ("interval: " + interval)
                if interval not in ("S","Min","H", "D", "W", "Y"):
                    usage.run(interval)
                    exit(1)
                else:
                    if interval == 'S':
                       globals.interval_string = 'Seconds'
                    elif interval == 'Min':
                       globals.interval_string = 'Minutes'
                    elif interval == 'H':
                       globals.interval_string = 'Hours'
                    elif interval == 'D':
                       globals.interval_string= 'Days'
                    elif interval == 'W':
                       globals.interval_string= 'Weeks'
                    elif interval == 'Y':
                       globals.interval_string= 'Years'
                    #print(interval_string)
            elif opt in ('-db', '--database'):
                globals.database = arg
            elif opt in ('-p', '--periods'):
                periods = arg
            elif opt in ('-s', '--startdate'):
                start_date = arg
            elif opt in ('-e', '--enddate'):
                end_date = arg
            elif opt in ('--debug'):
                globals.debug = True
            elif opt in ('-m', '--metric'):
                metric_category = arg
                #print(metric_category)
                if metric_category not in ('count','query','operation','store',"transaction", "page_cache", "bolt", "causal_clustering", "cypher", "check_point", "object","network", "server", "jvm_gc", "jvm_memory", "jvm_memory2","jvm_thread", "log_rotation", "file_descriptors","all","none"):
                    print(" " )
                    print("ERROR: Incorrect parameter:" + arg)
                    print(" " )
                    usage.run(metric_category)
                    exit(1)
            elif opt in ('-v', '--verbose'):
                globals.verbose = True
            elif opt in ('-z', '--checkdb'):
                globals.checkdb=True
            elif opt in ('--host_ip'):
                globals.host_ip=arg
            elif opt in ('-d', '--display_precision'):
                globals.display_precision=True
            elif opt in ('-b','--bolt_port'):
                globals.bolt_port=arg
            elif opt in ('--port'):
                globals.bolt_port = arg
            elif opt in ('-o', '--outfile'):
                output_filename = "neo_health.out"
            elif opt in ('-c','--customer'):
                globals.customer = arg
            elif opt in ('-r','--admin_report_directory'):
                globals.admin_report_directory = arg
            else:
                print("Incorrect parameter:" + arg)

        if start_date != None and end_date != None:
            if (interval != "X" and periods != None) or (interval == 'X' and periods != None) or (interval == 'X' and periods is None ) :
                usage.run("dates")
                exit(1)

    if len(sys.argv) == 0 or (start_date == None and end_date == None and interval == "X" and periods == None):
        interval = "D"
        interval_string = "Days"
        periods = 1
        options = False

    get_env.initialize()


    globals.metrics_csv_interval=flag_server_restarts.run()

    
    #verbose=True

    if globals.verbose:
      print (" ")
      print (" ")
      print ("###################################################################")
      print (" ")
      print ("Input Parameters: ")
      print (" ")
      print (" ")
      print (" ")
      print ('DATABASE            :', globals.database)
      print ('DEBUG               :', globals.debug)
      print ('STARTDATE           :', start_date)
      print ('ENDDATE             :', end_date)
      print ('INTERVAL            :', globals.interval_string)
      print ('PERIODS             :', periods)
      print ('OUTPUT              :', output_filename)
      print ('METRIC              :', metric_category)
      print ('NEO4J_HOME          :', globals.neo4j_home)
      print ('OUTPUT-DIR          :', globals.working_directory)
      print ('METRIC-DIR          :', globals.metrics_directory)
      print ('LOGS-DIR            :', globals.logs_directory)
      print ('CONF-DIR            :', globals.conf_directory)
      print ('BIN-DIR             :', globals.bin_directory)
      print ('RESULTS-DIR         :', globals.results_directory)
      print ('BOLT-PORT           :', globals.bolt_port)
      print ('DB-CHECK            :', globals.checkdb)
      print ('METRICS_CSV_INTERVAL:', globals.metrics_csv_interval)
      print ('VERSION             :', globals.version)
      print (" ")
      print (" ")

    if checkdb:
      host_db_check()

    if metric_category != "none":
        if metric_category == 'all':
            globals.process_metrics = 'all'

            csv_filename = globals.results_directory + "/" + globals.all_csv_filename

            if os.path.isfile(csv_filename):
                os.system("mv " + csv_filename + " " + csv_filename + ".old")
            else:
                os.system("touch " + csv_filename )

            #for metric_type in ("object","transaction", "bolt", "page_cache", "cypher", "check_point", "network", "server", "jvm_gc", "jvm_memory", "jvm_thread", "log_rotation","causal_clustering"):
            #for metric_type in ("object","transaction", "bolt", "cypher", "page_cache", "check_point", "server","jvm_gc" ):
            for metric_type in ('operation','count','store',"object","transaction", "bolt",  "cypher","page_cache", "check_point", "jvm_gc" , "query"):
            #for metric_type in ("object","transaction",  "page_cache", "check_point", "jvm_gc" , "query"):

                get_stats.run(start_date, end_date, metric_type,
                      interval, periods, options)
        else:
            get_stats.run(start_date, end_date, metric_category,
                  interval, periods, options)

        sys.stdout.flush()
        
        #convert_txt_pdf.run2()


if __name__ == "__main__":
    main(sys.argv[1:])


#import globals 
#import test 
 
#if __name__ == "__main__": 
    #globals.initialize() 
    #print( globals.num ) # print the initial value 
    #test.increment() 
    #print( globals.num ) # print the value after being modified within test.py
